Parte 1:

import java.util.Scanner;
public class SumaRecursivaArregloUI {
    public static int sumaRecursiva(int[] arreglo, int indice) {
        if (indice == 0) {
            return arreglo[0];
        } else {
            return arreglo[indice] + sumaRecursiva(arreglo, indice - 1);
        }
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("------------");            
        System.out.print("Por favor ingrese la cantidad de elementos del arreglo: ");
        int longitudArreglo = scanner.nextInt();
        int[] arreglo = new int[longitudArreglo];
        for (int i = 0; i < longitudArreglo; i++) {
            System.out.println("------------");
            System.out.print("Por favor ingrese el elemento " + (i + 1) + ": ");
            arreglo[i] = scanner.nextInt();
        }
        int resultado = sumaRecursiva(arreglo, arreglo.length - 1);
        System.out.println("Suma total: " + resultado);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 Parte 2:

import java.util.Scanner;
public class ConcatenarListaCircularUI {
    public static class Nodo {
        String valor;
        Nodo siguiente;
        public Nodo(String valor) {
            this.valor = valor;
            this.siguiente = null;
        }
    }

    public static String concatenarLista(Nodo cabeza) {
        if (cabeza == null) {
            return "";
        } else {
            String resultado = cabeza.valor + " ";
            Nodo actual = cabeza.siguiente;
            while (actual != null && actual != cabeza) {
                resultado += actual.valor + " ";
                actual = actual.siguiente;
            }
            return resultado;
        }
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Ingrese la cantidad de nodos de la lista circular: ");
        int cantidadNodos = scanner.nextInt();
        Nodo cabeza = null;
        Nodo nodoActual = null;
        for (int i = 0; i < cantidadNodos; i++) {
            System.out.print("Ingrese el valor del nodo " + (i + 1) + ": ");
            String valorNodo = scanner.nextLine();

            if (cabeza == null) {
                cabeza = new Nodo(valorNodo);
                nodoActual = cabeza;
            } else {
                Nodo nuevoNodo = new Nodo(valorNodo);
                nodoActual.siguiente = nuevoNodo;
                nodoActual = nuevoNodo;
            }
        }
        nodoActual.siguiente = cabeza; // Conectar el último nodo con la cabeza
        String cadenaConcatenada = concatenarLista(cabeza);
        System.out.println("Cadena concatenada: " + cadenaConcatenada);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Parte 3:
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Ingrese el número para calcular el factorial (A):");
        int numA = scanner.nextInt();
        System.out.println("Ingrese la base para calcular la potencia (B):");
        int baseB = scanner.nextInt();
        System.out.println("Ingrese el exponente para calcu1"
                + "2lar la potencia (B):");
        int exponenteB = scanner.nextInt();
        long factorialA = calcularFactorial(numA);
        double potenciaB = calcularPotencia(baseB, exponenteB);
        System.out.println("El factorial de " + numA + " es: " + factorialA);
        System.out.println("La potencia de " + baseB + " elevado a " + exponenteB + " es: " + potenciaB);
        double resultado = factorialA * potenciaB;
        System.out.println("El resultado de la multiplicación es: " + resultado);
    }
    public static long calcularFactorial(int num) {
        long factorial = 1;
        for (int i = 1; i <= num; i++) {
            factorial *= i;
        }
        return factorial;
    }
    public static double calcularPotencia(int base, int exponente) {
        return Math.pow(base, exponente);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Parte 4: 

import java.util.Scanner;
import java.util.Stack;
public class pila {
    public static void main(String[] args) {
        Stack<Integer> pila = new Stack<>();
        Scanner scanner = new Scanner(System.in);
System.out.println("------------");
        System.out.println("Por favor ingrese la cantidad de elementos en la pila:");
        int n = scanner.nextInt();
System.out.println("------------");
        System.out.println("por favor ingrese los elementos de la pila:");
        for (int i = 0; i < n; i++) {
            pila.push(scanner.nextInt());
        }
System.out.println("------------");
        System.out.println("Los elementos de la pila en orden invertido:");
        Stack<Integer> pilaInvertida = invertirPila(pila);
        while (!pilaInvertida.isEmpty()) {
            System.out.println(pilaInvertida.pop());
        }
        System.out.println("Muchisimas gracias por usar este programa");
    }
    public static Stack<Integer> invertirPila(Stack<Integer> pila) {
        if (pila.isEmpty()) {
            return new Stack<>();
        } else {
            int top = pila.pop();
            Stack<Integer> pilaInvertida = invertirPila(pila);
            pilaInvertida.push(top);
            return pilaInvertida;
}
}
}

